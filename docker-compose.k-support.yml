# Kafka Stack Port Allocation
# ----------------------------
# GUI accessibility: AKHQ on 9000 for easy access
# Consistency: Predictable patterns for scalable services
# Simplicity: Round numbers (9x00) for primary services
# Scalability: Room for growth within patterns
# Criticality: Memorable ports for critical services
#
# Services:
# ---------
# AKHQ (GUI):           9000, 9001     # Main, Monitoring
# Kafka Brokers:        9100 - 9199    # Up to 9 brokers
#   - Per broker:       91x0, 91x1, 91x2  # Main, Control, Monitoring
#   - Examples:         9100-9102, 9110-9112, 9120-9122
# Kafka Connect:        9200 - 9299    # Up to 9 workers
#   - Per worker:       92x0, 92x1     # Main, Monitoring
#   - Examples:         9200-9201, 9210-9211, 9220-9221
# Schema Registry:      9300, 9301     # Main, Monitoring
# ksqlDB:               9400, 9401     # Main, Monitoring
# Kafka REST Proxy:     9500, 9501     # Main, Monitoring
#
# Notes:
# - Port range 9000-9999 reserved for Kafka stack
# - Monitoring ports are always main port + 1
# - Kafka brokers use 3 consecutive ports
# - Scalable services follow pattern for easy expansion

version: '3.7'

services:
  # Inspecting tools
  akhq:
    # build:
    #   context: .
    image: tchiotludo/akhq
    restart: unless-stopped
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "${HOST_K1}:${PORT_EXT_K1},${HOST_K2}:${PORT_EXT_K2},${HOST_K3}:${PORT_EXT_K3}"
              schema-registry:
                url: "http://schema-registry:8085"
              connect:
                # First config
                - name: "connect-1"
                  url: "http://${HOST_K1}:${PORT_CONN_1:-9101}"
                - name: "connect-2"
                  url: "http://${HOST_K2}:${PORT_CONN_2:-9101}"

                # Second config
                - name: "connect-3"
                  url: "http://${HOST_K3}:${PORT_CONN_3:-9101}"
                - name: "connect-4"
                  url: "http://${HOST_K3}:${PORT_CONN_4:-9101}"

              ksqldb:
                - name: "ksqldb"
                  url: "http://${HOST_K1}:${PORT_KSQLDB:-8088

    ports:
      - ${PORT_AKHQ:-8000}:8080
      - ${PORT_AKHQ_METRICS:-8002}:28081  # /metrics or /prometheus
    
  schema-registry:
    ## Warning: set min in sync replicas to 2 if using 3 node cluster to ensure durable schema commits
    image: confluentinc/cp-schema-registry:${CONFLUENT_VERSION:-latest}
    restart: unless-stopped
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://${HOST_K1}:${PORT_EXT_K1},PLAINTEXT://${HOST_K2}:${PORT_EXT_K2},PLAINTEXT://${HOST_K3}:${PORT_EXT_K3}'
      SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8085'  # API requests come in on this
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'

      # SCHEMA_RESTISTRY_SCHEMA_COMPATIBILITY_LEVEL: 'backward'
    ports:
     - ${PORT_SCHEMA:-8002}:8085
  
  ksqldb:
    image: confluentinc/cp-ksqldb-server:${CONFLUENT_VERSION:-latest}
    restart: unless-stopped
    depends_on:
      - schema-registry
    ports:
      - 8088:8088
    environment:
      KSQL_BOOTSTRAP_SERVERS: '${HOST_K1}:${PORT_EXT_K1},${HOST_K2}:${PORT_EXT_K2},${HOST_K3}:${PORT_EXT_K3}'
      KSQL_LISTENERS: 'http://0.0.0.0:8088'
      KSQL_KSQL_SERVICE_ID: 'ksql'
      KSQL_KSQL_SCHEMA_REGISTRY_URL: 'http://schema-registry:8085'
      KSQL_KSQL_CONNECT_URL: "http://${HOST_K1}:${PORT_CONN_1:-9101}"
      KSQL_KSQL_SINK_PARTITIONS: '1'
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: '1'

  kafka-rest:
    image: confluentinc/cp-kafka-rest:${CONFLUENT_VERSION:-latest}
    depends_on:
      - schema-registry
    ports:
      - 8082:8082
    environment:
      KAFKA_REST_HOST_NAME: kafka-rest
      KAFKA_REST_BOOTSTRAP_SERVERS: '${HOST_K1}:${PORT_EXT_K1},${HOST_K2}:${PORT_EXT_K2},${HOST_K3}:${PORT_EXT_K3}'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8085'

# kafka rest api

